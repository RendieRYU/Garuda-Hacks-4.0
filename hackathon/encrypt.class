import java.util.Arrays;

public class AES {
    // Fungsi untuk melakukan operasi XOR antara dua blok 128-bit
    public static void xorBlocks(byte[] block1, byte[] block2, byte[] result) {
        for (int i = 0; i < 16; ++i) {
            result[i] = (byte) (block1[i] ^ block2[i]);
        }
    }

    // Fungsi substitusi byte berdasarkan tabel S-box
    public static void subBytes(byte[] block) {
        final byte[] sBox = {
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
             //... lengkapkan tabel sBox sampai 255 elemen
        };

        for (int i = 0; i < 16; ++i) {
            block[i] = sBox[block[i] & 0xFF];
        }
    }

    // Fungsi shift rows
    public static void shiftRows(byte[] block) {
        byte[] temp = new byte[16];

        // Baris 0 tetap tidak berubah
        temp[0] = block[0];
        temp[4] = block[4];
        temp[8] = block[8];
        temp[12] = block[12];

        // Geser baris 1
        temp[1] = block[5];
        temp[5] = block[9];
        temp[9] = block[13];
        temp[13] = block[1];

        // Geser baris 2
        temp[2] = block[10];
        temp[6] = block[14];
        temp[10] = block[2];
        temp[14] = block[6];

        // Geser baris 3
        temp[3] = block[15];
        temp[7] = block[3];
        temp[11] = block[7];
        temp[15] = block[11];

        // Salin kembali ke blok asli
        System.arraycopy(temp, 0, block, 0, 16);
    }

    // Fungsi untuk mengalikan bilangan dalam Galois Field (GF(2^8))
    public static byte gfMul(byte a, byte b) {
        byte p = 0;
        while (b != 0) {
            if ((b & 1) != 0) {
                p ^= a;
            }
            byte carry = (byte) (a & 0x80); // Cek apakah MSB adalah 1
            a <<= 1;
            if (carry != 0) {
                a ^= 0x1b; // Konstanta irreducible polinomial untuk GF(2^8)
            }
            b >>= 1;
        }
        return p;
    }

    // Fungsi mix columns
    public static void mixColumns(byte[] block) {
        final byte[][] matrix = {
            {0x02, 0x03, 0x01, 0x01},
            {0x01, 0x02, 0x03, 0x01},
            {0x01, 0x01, 0x02, 0x03},
            {0x03, 0x01, 0x01, 0x02}
        };

        byte[][] temp = new byte[4][4];
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                temp[i][j] = 0;
                for (int k = 0; k < 4; ++k) {
                    temp[i][j] ^= gfMul(matrix[i][k], block[k * 4 + j]);
                }
            }
        }

        // Salin kembali ke blok asli
        for (int i = 0; i < 4; ++i) {
            System.arraycopy(temp[i], 0, block, i * 4, 4);
        }
    }

    // Fungsi untuk melakukan operasi XOR antara blok 128-bit dengan kunci putaran
    public static void addRoundKey(byte[] block, byte[] roundKey) {
        for (int i = 0; i < 16; ++i) {
            block[i] ^= roundKey[i];
        }
    }

    // Fungsi enkripsi AES
    public static void encryptAES(byte[] plainText, byte[] key, byte[] cipherText) {
        // Inisialisasi kunci dan blok
        byte[] state = Arrays.copyOf(plainText, 16);

        // Tambahkan putaran kunci pertama
        addRoundKey(state, key);

        // Lakukan putaran enkripsi (10 putaran untuk AES-128)
        for (int round = 1; round <= 10; ++round) {
            subBytes(state);
            shiftRows(state);
            if (round < 10) {
                mixColumns(state);
            }
            addRoundKey(state, Arrays.copyOfRange(key, round * 16, (round + 1) * 16)); // Tambahkan kunci putaran
        }

        // Salin hasil enkripsi ke blok chiper
        System.arraycopy(state, 0, cipherText, 0, 16);
    }

    public static void main(String[] args) {
        // Data yang akan dienkripsi
        byte[] plainText = "Ini adalah contoh teks yang akan dienkripsi dengan AES.".getBytes();

        // Kunci enkripsi (128-bit)
        byte[] key = "admin".getBytes();

        // Hasil enkripsi
        byte[] cipherText = new byte[16];
        encryptAES(plainText, key, cipherText);

        System.out.println("Kata yang akan dienkripsi: " + new String(plainText));
        // Menampilkan hasil enkripsi dalam bentuk hexadecimal
        System.out.print("Hasil Enkripsi: ");
        for (int i = 0; i < 16; ++i) {
            System.out.printf("%02X", cipherText[i]);
        }
        System.out.println();
    }
}
